var assert=require("assert");var http=require("http");var net=require("net");var onFinished=require("..");describe("onFinished(res, listener)",function(){it("should invoke listener given an unknown object",function(e){onFinished({},e)});describe("when the response finishes",function(){it("should fire the callback",function(t){var e=http.createServer(function(e,n){onFinished(n,t);setTimeout(n.end.bind(n),0)});sendGet(e)});it("should include the response object",function(r){var e=http.createServer(function(e,t){onFinished(t,function(e,n){assert.ok(!e);assert.strictEqual(n,t);r()});setTimeout(t.end.bind(t),0)});sendGet(e)});it("should fire when called after finish",function(t){var e=http.createServer(function(e,n){onFinished(n,function(){onFinished(n,t)});setTimeout(n.end.bind(n),0)});sendGet(e)})});describe("when using keep-alive",function(){it("should fire for each response",function(t){var r=false;var i=http.createServer(function(e,n){onFinished(n,function(){if(r){s.end();i.close();t(r!==e?null:new Error("fired twice on same req"));return}r=e;writeRequest(s)});n.end()});var s;i.listen(function(){s=net.connect(this.address().port,function(){writeRequest(this)})})})});describe("when requests pipelined",function(){it("should fire for each request",function(e){var t=0;var r=[];var i=http.createServer(function(e,n){r.push(n);onFinished(n,function(e){assert.ifError(e);assert.strictEqual(r[0],n);r.shift();if(r.length===0){s.end();return}r[0].end("response b")});onFinished(e,function(e){assert.ifError(e);if(++t!==2){return}assert.strictEqual(r.length,2);r[0].end("response a")});if(r.length===1){writeRequest(s)}e.resume()});var s;i.listen(function(){var n="";s=net.connect(this.address().port,function(){writeRequest(this)});s.on("data",function(e){n+=e.toString("binary")});s.on("end",function(){assert.ok(/response a/.test(n));assert.ok(/response b/.test(n));i.close(e)})})})});describe("when response errors",function(){it("should fire with error",function(t){var r=http.createServer(function(e,n){onFinished(n,function(e){assert.ok(e);r.close(t)});i.on("error",noop);i.write("W")});var i;r.listen(function(){i=net.connect(this.address().port,function(){writeRequest(this,true)})})});it("should include the response object",function(r){var i=http.createServer(function(e,t){onFinished(t,function(e,n){assert.ok(e);assert.strictEqual(n,t);i.close(r)});n.on("error",noop);n.write("W")});var n;i.listen(function(){n=net.connect(this.address().port,function(){writeRequest(this,true)})})})});describe("when the response aborts",function(){it("should execute the callback",function(t){var r;var i=http.createServer(function(e,n){onFinished(n,close(i,t));setTimeout(r.abort.bind(r),0)});i.listen(function(){var e=this.address().port;r=http.get("http://127.0.0.1:"+e);r.on("error",noop)})})});describe("when calling many times on same response",function(){it("should not print warnings",function(r){var n=http.createServer(function(e,n){var t=captureStderr(function(){for(var e=0;e<400;e++){onFinished(n,noop)}});onFinished(n,r);assert.strictEqual(t,"");n.end()});n.listen(function(){var e=this.address().port;http.get("http://127.0.0.1:"+e,function(e){e.resume();e.on("end",n.close.bind(n))})})})})});describe("isFinished(res)",function(){it("should return undefined for unknown object",function(){assert.strictEqual(onFinished.isFinished({}),undefined)});it("should be false before response finishes",function(t){var e=http.createServer(function(e,n){assert.ok(!onFinished.isFinished(n));n.end();t()});sendGet(e)});it("should be true after response finishes",function(t){var e=http.createServer(function(e,n){onFinished(n,function(e){assert.ifError(e);assert.ok(onFinished.isFinished(n));t()});n.end()});sendGet(e)});describe("when requests pipelined",function(){it("should have correct state when socket shared",function(t){var r=0;var i=[];var s=http.createServer(function(e,n){i.push(n);onFinished(e,function(e){assert.ifError(e);if(++r!==2){return}assert.ok(!onFinished.isFinished(i[0]));assert.ok(!onFinished.isFinished(i[1]));i[0].end();i[1].end();o.end();s.close(t)});if(i.length===1){writeRequest(o)}e.resume()});var o;s.listen(function(){o=net.connect(this.address().port,function(){writeRequest(this)})})});it("should handle aborted requests",function(t){var r=0;var i=0;var s=http.createServer(function(e,n){i++;onFinished(e,function(e){switch(++r){case 1:assert.ifError(e);o.on("error",noop);o.destroy();break;case 2:s.close(t);break}});e.resume();if(i===1){writeRequest(o,true)}});var o;s.listen(function(){o=net.connect(this.address().port,function(){writeRequest(this)})})})});describe("when response errors",function(){it("should return true",function(t){var r=http.createServer(function(e,n){onFinished(n,function(e){assert.ok(e);assert.ok(onFinished.isFinished(n));r.close(t)});i.on("error",noop);i.write("W")});var i;r.listen(function(){i=net.connect(this.address().port,function(){writeRequest(this,true)})})})});describe("when the response aborts",function(){it("should return true",function(t){var r;var i=http.createServer(function(e,n){onFinished(n,function(e){assert.ifError(e);assert.ok(onFinished.isFinished(n));i.close(t)});setTimeout(r.abort.bind(r),0)});i.listen(function(){var e=this.address().port;r=http.get("http://127.0.0.1:"+e);r.on("error",noop)})})})});describe("onFinished(req, listener)",function(){describe("when the request finishes",function(){it("should fire the callback",function(t){var e=http.createServer(function(e,n){onFinished(e,t);e.resume();setTimeout(n.end.bind(n),0)});sendGet(e)});it("should include the request object",function(r){var e=http.createServer(function(t,e){onFinished(t,function(e,n){assert.ok(!e);assert.strictEqual(n,t);r()});t.resume();setTimeout(e.end.bind(e),0)});sendGet(e)});it("should fire when called after finish",function(t){var e=http.createServer(function(e,n){onFinished(e,function(){onFinished(e,t)});e.resume();setTimeout(n.end.bind(n),0)});sendGet(e)})});describe("when using keep-alive",function(){it("should fire for each request",function(i){var s=false;var o=http.createServer(function(n,t){var r="";onFinished(n,function(e){assert.ifError(e);assert.strictEqual(r,"A");if(s){c.end();o.close();i(s!==n?null:new Error("fired twice on same req"));return}s=n;t.end();writeRequest(c,true)});n.setEncoding("utf8");n.on("data",function(e){r+=e});c.write("1\r\nA\r\n");c.write("0\r\n\r\n")});var c;o.listen(function(){c=net.connect(this.address().port,function(){writeRequest(this,true)})})})});describe("when request errors",function(){it("should fire with error",function(t){var r=http.createServer(function(e,n){onFinished(e,function(e){assert.ok(e);r.close(t)});i.on("error",noop);i.write("W")});var i;r.listen(function(){i=net.connect(this.address().port,function(){writeRequest(this,true)})})});it("should include the request object",function(r){var i=http.createServer(function(t,e){onFinished(t,function(e,n){assert.ok(e);assert.strictEqual(n,t);i.close(r)});n.on("error",noop);n.write("W")});var n;i.listen(function(){n=net.connect(this.address().port,function(){writeRequest(this,true)})})})});describe("when requests pipelined",function(){it("should handle socket errors",function(t){var r=0;var i=http.createServer(function(e){var n=++r;onFinished(e,function(e){assert.ok(e);if(!--o)i.close(t)});if(n===1){writeRequest(s,true);e.pause()}else{s.write("W");e.resume()}});var s;var o=3;i.listen(function(){s=net.connect(this.address().port,function(){writeRequest(this)});s.on("close",function(){assert.strictEqual(r,2);if(!--o)i.close(t)})})})});describe("when the request aborts",function(){it("should execute the callback",function(t){var r;var i=http.createServer(function(e,n){onFinished(e,close(i,t));setTimeout(r.abort.bind(r),0)});i.listen(function(){var e=this.address().port;r=http.get("http://127.0.0.1:"+e);r.on("error",noop)})})});describe("when calling many times on same request",function(){it("should not print warnings",function(r){var n=http.createServer(function(n,e){var t=captureStderr(function(){for(var e=0;e<400;e++){onFinished(n,noop)}});onFinished(n,r);assert.strictEqual(t,"");e.end()});n.listen(function(){var e=this.address().port;http.get("http://127.0.0.1:"+e,function(e){e.resume();e.on("end",n.close.bind(n))})})})});describe("when CONNECT method",function(){it("should fire when request finishes",function(r){var e;var i=http.createServer(function(e,n){n.statusCode=405;n.end()});i.on("connect",function(e,n,t){var r=[t];onFinished(e,function(e){assert.ifError(e);assert.strictEqual(Buffer.concat(r).toString(),"knock, knock");n.on("data",function(e){assert.strictEqual(e.toString(),"ping");n.end("pong")});n.write("HTTP/1.1 200 OK\r\n\r\n")});e.on("data",function(e){r.push(e)})});i.listen(function(){e=http.request({hostname:"127.0.0.1",method:"CONNECT",path:"127.0.0.1:80",port:this.address().port});e.on("connect",function(e,n,t){n.write("ping");n.on("data",function(e){assert.strictEqual(e.toString(),"pong");n.end();i.close(r)})});e.end("knock, knock")})});it("should fire when called after finish",function(r){var e;var i=http.createServer(function(e,n){n.statusCode=405;n.end()});i.on("connect",function(n,t,e){var r=[e];onFinished(n,function(e){assert.ifError(e);assert.strictEqual(Buffer.concat(r).toString(),"knock, knock");t.write("HTTP/1.1 200 OK\r\n\r\n")});t.on("data",function(e){assert.strictEqual(e.toString(),"ping");onFinished(n,function(){t.end("pong")})});n.on("data",function(e){r.push(e)})});i.listen(function(){e=http.request({hostname:"127.0.0.1",method:"CONNECT",path:"127.0.0.1:80",port:this.address().port});e.on("connect",function(e,n,t){n.write("ping");n.on("data",function(e){assert.strictEqual(e.toString(),"pong");n.end();i.close(r)})});e.end("knock, knock")})})});describe("when Upgrade request",function(){it("should fire when request finishes",function(r){var e;var i=http.createServer(function(e,n){n.statusCode=405;n.end()});i.on("upgrade",function(e,n,t){var r=[t];onFinished(e,function(e){assert.ifError(e);assert.strictEqual(Buffer.concat(r).toString(),"knock, knock");n.on("data",function(e){assert.strictEqual(e.toString(),"ping");n.end("pong")});n.write("HTTP/1.1 101 Switching Protocols\r\n");n.write("Connection: Upgrade\r\n");n.write("Upgrade: Raw\r\n");n.write("\r\n")});e.on("data",function(e){r.push(e)})});i.listen(function(){e=http.request({headers:{Connection:"Upgrade",Upgrade:"Raw"},hostname:"127.0.0.1",port:this.address().port});e.on("upgrade",function(e,n,t){n.write("ping");n.on("data",function(e){assert.strictEqual(e.toString(),"pong");n.end();i.close(r)})});e.end("knock, knock")})});it("should fire when called after finish",function(r){var e;var i=http.createServer(function(e,n){n.statusCode=405;n.end()});i.on("upgrade",function(n,t,e){var r=[e];onFinished(n,function(e){assert.ifError(e);assert.strictEqual(Buffer.concat(r).toString(),"knock, knock");t.write("HTTP/1.1 101 Switching Protocols\r\n");t.write("Connection: Upgrade\r\n");t.write("Upgrade: Raw\r\n");t.write("\r\n")});t.on("data",function(e){assert.strictEqual(e.toString(),"ping");onFinished(n,function(){t.end("pong")})});n.on("data",function(e){r.push(e)})});i.listen(function(){e=http.request({headers:{Connection:"Upgrade",Upgrade:"Raw"},hostname:"127.0.0.1",port:this.address().port});e.on("upgrade",function(e,n,t){n.write("ping");n.on("data",function(e){assert.strictEqual(e.toString(),"pong");n.end();i.close(r)})});e.end("knock, knock")})})})});describe("isFinished(req)",function(){it("should return undefined for unknown object",function(){assert.strictEqual(onFinished.isFinished({}),undefined)});it("should be false before request finishes",function(t){var e=http.createServer(function(e,n){assert.ok(!onFinished.isFinished(e));e.resume();n.end();t()});sendGet(e)});it("should be true after request finishes",function(t){var e=http.createServer(function(n,e){onFinished(n,function(e){assert.ifError(e);assert.ok(onFinished.isFinished(n));t()});n.resume();e.end()});sendGet(e)});describe("when request data buffered",function(){it("should be false before request finishes",function(t){var e=http.createServer(function(e,n){assert.ok(!onFinished.isFinished(e));e.pause();setTimeout(function(){assert.ok(!onFinished.isFinished(e));e.resume();n.end();t()},10)});sendGet(e)})});describe("when request errors",function(){it("should return true",function(t){var r=http.createServer(function(n,e){onFinished(n,function(e){assert.ok(e);assert.ok(onFinished.isFinished(n));r.close(t)});i.on("error",noop);i.write("W")});var i;r.listen(function(){i=net.connect(this.address().port,function(){writeRequest(this,true)})})})});describe("when the request aborts",function(){it("should return true",function(t){var r;var i=http.createServer(function(n,e){onFinished(e,function(e){assert.ifError(e);assert.ok(onFinished.isFinished(n));i.close(t)});setTimeout(r.abort.bind(r),0)});i.listen(function(){var e=this.address().port;r=http.get("http://127.0.0.1:"+e);r.on("error",noop)})})});describe("when CONNECT method",function(){it("should be true immediately",function(r){var e;var i=http.createServer(function(e,n){n.statusCode=405;n.end()});i.on("connect",function(e,n,t){assert.ok(onFinished.isFinished(e));assert.strictEqual(t.length,0);e.resume();n.on("data",function(e){assert.strictEqual(e.toString(),"ping");n.end("pong")});n.write("HTTP/1.1 200 OK\r\n\r\n")});i.listen(function(){e=http.request({hostname:"127.0.0.1",method:"CONNECT",path:"127.0.0.1:80",port:this.address().port});e.on("connect",function(e,n,t){n.write("ping");n.on("data",function(e){assert.strictEqual(e.toString(),"pong");n.end();i.close(r)})});e.end()})});it("should be true after request finishes",function(r){var e;var i=http.createServer(function(e,n){n.statusCode=405;n.end()});i.on("connect",function(n,t,e){var r=[e];onFinished(n,function(e){assert.ifError(e);assert.ok(onFinished.isFinished(n));assert.strictEqual(Buffer.concat(r).toString(),"knock, knock");t.write("HTTP/1.1 200 OK\r\n\r\n")});t.on("data",function(e){assert.strictEqual(e.toString(),"ping");t.end("pong")});n.on("data",function(e){r.push(e)})});i.listen(function(){e=http.request({hostname:"127.0.0.1",method:"CONNECT",path:"127.0.0.1:80",port:this.address().port});e.on("connect",function(e,n,t){n.write("ping");n.on("data",function(e){assert.strictEqual(e.toString(),"pong");n.end();i.close(r)})});e.end("knock, knock")})})});describe("when Upgrade request",function(){it("should be true immediately",function(r){var e;var i=http.createServer(function(e,n){n.statusCode=405;n.end()});i.on("upgrade",function(e,n,t){assert.ok(onFinished.isFinished(e));assert.strictEqual(t.length,0);e.resume();n.on("data",function(e){assert.strictEqual(e.toString(),"ping");n.end("pong")});n.write("HTTP/1.1 101 Switching Protocols\r\n");n.write("Connection: Upgrade\r\n");n.write("Upgrade: Raw\r\n");n.write("\r\n")});i.listen(function(){e=http.request({headers:{Connection:"Upgrade",Upgrade:"Raw"},hostname:"127.0.0.1",port:this.address().port});e.on("upgrade",function(e,n,t){n.write("ping");n.on("data",function(e){assert.strictEqual(e.toString(),"pong");n.end();i.close(r)})});e.end()})});it("should be true after request finishes",function(r){var e;var i=http.createServer(function(e,n){n.statusCode=405;n.end()});i.on("upgrade",function(n,t,e){var r=[e];onFinished(n,function(e){assert.ifError(e);assert.ok(onFinished.isFinished(n));assert.strictEqual(Buffer.concat(r).toString(),"knock, knock");t.write("HTTP/1.1 101 Switching Protocols\r\n");t.write("Connection: Upgrade\r\n");t.write("Upgrade: Raw\r\n");t.write("\r\n")});t.on("data",function(e){assert.strictEqual(e.toString(),"ping");t.end("pong")});n.on("data",function(e){r.push(e)})});i.listen(function(){e=http.request({headers:{Connection:"Upgrade",Upgrade:"Raw"},hostname:"127.0.0.1",port:this.address().port});e.on("upgrade",function(e,n,t){n.write("ping");n.on("data",function(e){assert.strictEqual(e.toString(),"pong");n.end();i.close(r)})});e.end("knock, knock")})})})});function captureStderr(e){var r=[];var n=process.stderr.write;process.stderr.write=function e(n,t){r.push(new Buffer(n,t))};try{e()}finally{process.stderr.write=n}return Buffer.concat(r).toString("utf8")}function close(e,t){return function(n){e.close(function(e){t(n||e)})}}function noop(){}function sendGet(t){t.listen(function e(){var n=this.address().port;http.get("http://127.0.0.1:"+n,function e(n){n.resume();n.on("end",t.close.bind(t))})})}function writeRequest(e,n){e.write("GET / HTTP/1.1\r\n");e.write("Host: localhost\r\n");e.write("Connection: keep-alive\r\n");if(n){e.write("Transfer-Encoding: chunked\r\n")}e.write("\r\n")}
